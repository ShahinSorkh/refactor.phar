{"name":"PHP Refactoring Browser","tagline":"A command line refactoring tool for PHP","body":"# PHP Refactoring Browser\r\n\r\n    Note: This software is under development and in alpha state. Refactorings\r\n    do not contain all necessary pre-conditions and might mess up your code.\r\n    Check the diffs carefully before applying the patches.\r\n\r\nAutomatic Refactorings for PHP Code by generating diffs that describe\r\nthe refactorings steps. To prevent simple mistakes during refactorings, an automated tool\r\nis a great.\r\n\r\nSee a [screenshot of extract-method in action](docs/extract_method.png).\r\n\r\nThe library is standing on the shoulder of giants, using multiple existing libraries:\r\n\r\n* [PHP Parser](https://github.com/nikic/PHP-Parser) by Nikic\r\n* [PHP Token Reflection](https://github.com/Andrewsville/PHP-Token-Reflection) from Ondřej Nešpor\r\n* [PHP Analyzer](https://github.com/scrutinizer-ci/php-analyzer) by Johannes Schmitt\r\n\r\nBased on data from these sources the Refactoring Browser consists of two distinct components:\r\n\r\n* ``Patches`` allows to build patches based on change operations on a file.\r\n* ``Refactoring`` contains the actual Refactoring domain and adapters to third party libraries.\r\n\r\nThe refactoring browser is used with:\r\n\r\n    php refactor.phar <refactoring> <arg1>...<argN>\r\n\r\nIt outputs a diff to the screen and you can apply it to your code by piping it to ``patch -p1``:\r\n\r\n    php refactor.phar <refactoring> <arg1>...<argN> | patch -p1\r\n\r\n## Why?\r\n\r\nUsers of PHPStorm (or Netbeans) might wonder why this project exists, all the\r\nrefactorings are available in this IDE. We feel there are several reasons to have\r\nsuch a tool in PHP natively:\r\n\r\n* We are VIM users and don't want to use an IDE for refactorings. Also we\r\n  are independent of an IDE and users of any (non PHP Storm) editor can now\r\n  benefit from the practice of automated refactorings.\r\n* The non-existance of a simple refactoring tool leads to programmers not\r\n  refactoring \"just to be safe\". This hurts long time maintainability of code.\r\n  Refactoring is one of the most important steps during development and just come easy.\r\n* Generating patches for refactorings before applying them allows to easily\r\n  verify the operation yourself or sending it to a colleague.\r\n* The libaries (see above) to build such a tool are available, so why not do it.\r\n* The project is an academic of sorts as well, as you can see in the Design Goals\r\n  we try to be very strict about the Ports and Adapters architecture and a Domain\r\n  Driven Design.\r\n\r\n## Refactorings\r\n\r\n### Extract Method\r\n\r\nExtract a range of lines into a new method and call this method from the original\r\nlocation:\r\n\r\n    php refactor.phar extract-method <file> <line-range> <new-method>\r\n\r\nThis refactoring automatically detects all necssary inputs and ouputs from the\r\nfunction and generates the argument list and return statement accordingly.\r\n\r\n### Rename Local Variable\r\n\r\nRename a local variable from one to another name:\r\n\r\n    php refactor.phar rename-local-variable <file> <line> <old-name> <new-name>\r\n\r\n### Convert Local to Instance Variable\r\n\r\nConverts a local variable into an instance variable, creates the property and renames\r\nall the occurances in the selected method to use the instance variable:\r\n\r\n    php refactor.phar convert-local-to-instance-variable <file> <line> <variable>\r\n\r\n## Roadmap\r\n\r\nIntegration:\r\n\r\n* Vim Plugin to apply refactorings from within Vim.\r\n\r\nList of Refactorings to implement:\r\n\r\n* Extract Method (Prototype Done)\r\n    * Check code after line range if assignments are actually used, or just internal to extracted method\r\n    * Check how previously defined arrays work when not fully part of extracted method.\r\n* Rename Local Variable (Prototype Done)\r\n* Optimize use statements\r\n* Convert Local Variable to Instance Variable (Prototype Done)\r\n* Convert Magic Value to Constant\r\n* Rename Method\r\n    * Private Methods Only first\r\n* Rename Instance Variable\r\n    * Private Variables Only First\r\n* Rename Class (PSR-0 aware)\r\n* Rename Namespace (PSR-0 aware)\r\n* Extract Interface\r\n\r\n## Internals\r\n\r\n### Design Goals\r\n\r\n* Be independent of third-party libraries and any Type Inference Engine (PDepend, PHP Analyzer) via Ports+Adapters\r\n* Apply Domain-Driven-Design and find suitable Bounded Contexts and Ubiquitous Language within them\r\n* Avoid primitive obsession by introducing value objects for useful constructs in the domain\r\n\r\n### Processing steps\r\n\r\nWhen you run the Refactoring Browser the following steps happen:\r\n\r\n* Update Type Database (based on filemtime or md5 hashes?) when necessary for refactoring\r\n* Analyze Refactoring (pre conditions)\r\n* Generate Patch to perform refactoring\r\n* Optionally apply patch (Currently just pipe to patch)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
